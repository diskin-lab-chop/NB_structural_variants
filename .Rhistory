## load CGI data copy number and SV  collapsed data by type of SVs
#load("~/Box Sync/My_CHOP/CNV/snv_files_CGI_081318.rda",verbose=T)
#load("~/Box Sync/My_CHOP/data/SV_nbl/V2_sv_analysis/SV_analysis_Sep20_18.rda",verbose=T)
load("data/SV_analysis_Oct31_18.rda",verbose=T)
#load("~/Box Sync/My_CHOP/SV_paper_V2/rdata/BP_analysis_Nov5_18.rda",verbose=T)
load("data/BP_analysis_Nov15_19.rda",verbose=T)
a<- sort(2*2^results_CN$gene_CN["MYCN",])
barplot(a+50,col=mycna_col[names(a)])
nbl_svdat <- results_NBL$sv_df[,c(1,3,4,5,7,8,9,28)]
nbl_svdat[which(unlist(lapply(apply(nbl_svdat[,c(2,5)],1,unique),length)) == 2),"Type"] <- "TRA"
nbl_svdat[grep("inversion",nbl_svdat$Type),"Type"] <- "INV"
nbl_svdat[grep("distal-duplication",nbl_svdat$Type),"Type"] <- "INS"
nbl_svdat[grep("duplication",nbl_svdat$Type),"Type"] <- "DUP"
nbl_svdat[grep("deletion",nbl_svdat$Type),"Type"] <- "DEL"
nbl_svdat[grep("complex",nbl_svdat$Type),"Type"] <- "BND"
rownames(nbl_svdat) <- NULL
nbl_svdat[,"TARGET.USI"] <-  substr(nbl_svdat[,"TARGET.USI"],11,16)
nbl_segdat <- segment_cgi
save(nbl_svdat,nbl_segdat, file="~/Box Sync/git/svcnvplus/data/nbl_target_wgs.rda")
# load dbgap metadata for coverage data
sraRunTab_wgs <- read.delim("data/SraRunTable_wgs_alltumors.txt",sep = "\t",as.is=TRUE)
sraRunTab_cgi <- sraRunTab_wgs[which(sraRunTab_wgs$Platform_s == "COMPLETE_GENOMICS"),]
tumor_libsize <- sraRunTab_cgi$MBases_l[grep("TARGET-30-[A-Z][A-Z][A-Z][A-Z][A-Z][A-Z]-01",sraRunTab_cgi$Sample_Name_s)]
sraRunTab_wgs <- read.delim("data/SraRunTable_wgs_alltumors.txt",sep = "\t",as.is=TRUE)
sraRunTab_cgi <- sraRunTab_wgs[which(sraRunTab_wgs$Platform_s == "COMPLETE_GENOMICS"),]
tumor_libsize <- sraRunTab_cgi$MBases_l[grep("TARGET-30-[A-Z][A-Z][A-Z][A-Z][A-Z][A-Z]-01",sraRunTab_cgi$Sample_Name_s)]
names(tumor_libsize)<- substr(grep("TARGET-30-[A-Z][A-Z][A-Z][A-Z][A-Z][A-Z]-01",sraRunTab_cgi$Sample_Name_s,value=T),0,16)
blood_libsize <- sraRunTab_cgi$MBases_l[grep("TARGET-30-[A-Z][A-Z][A-Z][A-Z][A-Z][A-Z]-10",sraRunTab_cgi$Sample_Name_s)]
names(blood_libsize)<- substr(grep("TARGET-30-[A-Z][A-Z][A-Z][A-Z][A-Z][A-Z]-10",sraRunTab_cgi$Sample_Name_s,value=T),0,16)
ll<-list(tumor=tumor_libsize/3234.83,blood=blood_libsize/3234.83)
boxplot(ll,las=1,col=c("grey30","grey90"),names=c("Tumor","Blood"),ylab="Average depth")
vioplot2(ll,las=1,border=c("black","black"),col=c("grey30","grey90"),names=c("Tumor","Blood"),ylab="Average depth")
library(vioplot)
vioplot(ll,las=1,border=c("black","black"),col=c("grey30","grey90"),names=c("Tumor","Blood"),ylab="Average depth")
cgi_samples <- setdiff(substr(intersect(names(blood_libsize),names(tumor_libsize)),11,16),nonconsent)
HR_MNA <- intersect(names(which(mycna == "amp")),cgi_samples)
HR_NA <- intersect(intersect(names(which(risk=="high")),names(which(mycna !="amp" ))),cgi_samples)
INT <- intersect(names(which(risk=="intermediate")),cgi_samples)
LOW <- intersect(names(which(risk=="low")),cgi_samples)
LOWINT <- c(INT,LOW)
# load expression data for eQTL analysis
load("data/kallisto_nbltpm_refseq_hg19_171.rda",verbose=TRUE)
sraRunTab_rna_nbl <- sraRunTab_rna[grep("TARGET-30-[A-Z][A-Z][A-Z][A-Z][A-Z][A-Z]-01",sraRunTab_rna$Sample_Name_s),]
srr <- sraRunTab_rna_nbl$Run_s[which(sraRunTab_rna_nbl$Center_Name_s == "NCI-KHAN")]
usi <- sraRunTab_rna_nbl$Sample_Name_s[which(sraRunTab_rna_nbl$Center_Name_s == "NCI-KHAN")]
r_expmat <- nblsym[,srr]
colnames(r_expmat) <- substr(usi,11,16)
r_expmat<-r_expmat[,setdiff(colnames(r_expmat),nonconsent)]
rna_samples <- colnames(r_expmat)
# load human Exon array data for eQTL
idlist <- read.delim("data/usi_2targetID.txt",header=FALSE,as.is=TRUE)
convertid <- idlist$V1
names(convertid) <- idlist$V2
load("data/ln_mexp.rda",verbose=TRUE)
colnames(l_expmat) <- substr(convertid[colnames(l_expmat)],11,16)
l_expmat<-l_expmat[,setdiff(colnames(l_expmat),nonconsent)]
huex_samples <-  unname(colnames(l_expmat))
## Figure 1a clinical and copy number table
## combine datasets for clinical data table
all_samples <- unique(c(rna_samples,huex_samples,snp_samples,cgi_samples))
wgs<-rna<-snp<-huex<-meth <- rep("white",length(all_samples))
names(wgs) <- names(rna) <- names(huex) <- names(snp) <- names(meth) <- all_samples
wgs[cgi_samples] <- "blue"
snp[snp_samples] <- "lightblue"
rna[rna_samples] <- "red"
huex[huex_samples] <- "purple"
stage_b <-stage
stage_b[which(stage_b == "4S")] <- 0
unknownmycn_snp <- genecn_snp["MYCN",intersect(hr_unknown,colnames(genecn_snp)) ]
unknownmycn_cgi <- genecn_cgi["MYCN",intersect(hr_unknown,colnames(genecn_cgi)) ]
mycna[names(unknownmycn_snp)[which(unknownmycn_snp > 1)]] <- "amp"
mycna[names(unknownmycn_snp)[which(unknownmycn_snp < 1)]] <- "non-amp"
mycna[intersect(hr_unk,colnames(genecn_cgi))] <- "non-amp"
hr_amp2 <- intersect(all_samples, names(which(mycna == "amp")))
hr_noa2 <- setdiff(intersect(all_samples, highrisk),hr_amp2)
group <- c(rep(0,length(intersect(all_samples,hr_amp2))),
rep(1,length(intersect(all_samples,hr_noa2))),
rep(2,length(intersect(all_samples,intrisk))),
rep(3,length(intersect(all_samples,lowrisk))))
names(group)<-c(intersect(all_samples,hr_amp2),intersect(all_samples,hr_noa2),intersect(all_samples,intrisk),intersect(all_samples,lowrisk))
group_col <-group
group_col[which(group == 0)] <- "red"
group_col[which(group == 1)] <- "orange"
group_col[which(group == 2)] <- "darkgreen"
group_col[which(group == 3)] <- "green"
#age_col_val
Pheno2 <- rbind(Pheno["gender_col",names(group_col)],age_col[names(group_col)],Pheno[c("vital_col","mycna_col","stage_col","risk_col"),names(group_col)],group_col)
# order samples for figure 1A according to data availability $ n=1025
a<- stage_b[names(sort(stage_b[names(group)],decreasing=T))]
a<- a[names(sort(huex))]
a<- a[names(sort(rna))]
a<- a[names(sort(snp))]
a<- a[names(sort(wgs))]
final_order <- names( sort(group[names(a)]))
final_order <- final_order[which(final_order %in% names(group))]
# plot mock heatmaps with phenotype bars for the figure 1A composition
fakemat <- matrix(ncol=length(final_order),nrow=5)
colnames(fakemat) <- final_order
fakemat[] <- 0
Data_col <- rbind(meth,huex,rna,snp,wgs)
SCA_col2 <- matrix(ncol=length(final_order),nrow=nrow(SCA_col))
colnames(SCA_col2) <- final_order
rownames(SCA_col2) <- rownames(SCA_col)
SCA_col2[]<- "lightgrey"
SCA_col2[,intersect(colnames(SCA_col),final_order) ] <- SCA_col[,intersect(colnames(SCA_col),final_order) ]
fakemat <- matrix(ncol=length(final_order),nrow=5)
colnames(fakemat) <- final_order
fakemat[] <- 0
Data_col <- rbind(meth,huex,rna,snp,wgs)
SCA_col2 <- matrix(ncol=length(final_order),nrow=nrow(SCA_col))
colnames(SCA_col2) <- final_order
rownames(SCA_col2) <- rownames(SCA_col)
SCA_col2[]<- "lightgrey"
SCA_col2[,intersect(colnames(SCA_col),final_order) ] <- SCA_col[,intersect(colnames(SCA_col),final_order) ]
png("Figures/Figure1/fig1a_sample/heat_data_10_17_18.png",height=500,width=1000)
heatmap.3(fakemat[,final_order], ColSideColors = t(Data_col[,final_order]),Colv=FALSE,Rowv=FALSE,lhei=c(0.5,1))
source('R/heatmap3.R')
heatmap.3(fakemat[,final_order], ColSideColors = t(Data_col[,final_order]),Colv=FALSE,Rowv=FALSE,lhei=c(0.5,1))
fakemat[,final_order]
dim(fakemat[,final_order])
fakemat[1:4,final_order]
fakemat[1:4,1:4]
fakemat <- matrix(ncol=length(final_order),nrow=5)
colnames(fakemat) <- final_order
fakemat[] <- 0
Data_col <- rbind(meth,huex,rna,snp,wgs)
SCA_col2 <- matrix(ncol=length(final_order),nrow=nrow(SCA_col))
colnames(SCA_col2) <- final_order
rownames(SCA_col2) <- rownames(SCA_col)
SCA_col2[]<- "lightgrey"
SCA_col2[,intersect(colnames(SCA_col),final_order) ] <- SCA_col[,intersect(colnames(SCA_col),final_order) ]
png("Figures/Figure1/fig1a_sample/heat_data_10_17_18.png",height=500,width=1000)
heatmap.3(fakemat[,final_order], ColSideColors = t(Data_col[,final_order]),Colv=FALSE,Rowv=FALSE,lhei=c(0.5,1))
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
png("Figures/Figure1/fig1a_sample/heat_data_10_17_18.png",height=500,width=1000)
heatmap.3(fakemat[,final_order], ColSideColors = t(Data_col[,final_order]),Colv=FALSE,Rowv=FALSE,lhei=c(0.5,1))
dev.off()
dev.off()
dev.off()
heatmap.3(fakemat[,final_order], ColSideColors = t(Data_col[,final_order]),Colv=FALSE,Rowv=FALSE,lhei=c(0.5,1))
png("Figures/Figure1/fig1a_sample/heat_data_10_17_18.png",height=500,width=1000)
heatmap.3(fakemat[,final_order], ColSideColors = t(Data_col[,final_order]),Colv=FALSE,Rowv=FALSE,lhei=c(0.5,1))
dev.off()
png("Figures/Figure1/fig1a_sample/heat_data_10_17_18.png",height=500,width=1000)
heatmap.3(fakemat[,final_order], ColSideColors = t(Data_col[,final_order]),Colv=FALSE,Rowv=FALSE,lhei=c(0.5,1))
dev.off()
png("Figures/Figure1/fig1a_sample/heat_sca_10_17_18.png",height=600,width=1000)
heatmap.3(fakemat[,final_order], ColSideColors = t(SCA_col2[,final_order]),Colv=FALSE,Rowv=FALSE,lhei=c(0.5,1))
dev.off()
png("Figures/Figure1/fig1a_sample/heat_clinical_10_17_18.png",height=600,width=1000)
heatmap.3(fakemat[,final_order], ColSideColors = t(Pheno2[,final_order]),Colv=FALSE,Rowv=FALSE,lhei=c(0.5,1))
dev.off()
fakemat
ll_sv <- list(
NBL=results_NBL$sv_df,
ALL=results_ALL$sv_df,
AML=results_AML$sv_df,
OS=results_OS$sv_df,
WT=results_WT$sv_df
)
svTypeCols <- c("lightgrey","blue","purple","green","yellow","red")
names(svTypeCols)<- c("complex","deletion","distal-duplication","interchromosomal","inversion","tandem-duplication")
ll_type <- ll_type_m <-list()
for(i in names(ll_sv)){
ll_sv[[i]][which(ll_sv[[i]]$Type == "probable-inversion"),"Type"] <- "inversion"
ll_sv[[i]][which(ll_sv[[i]]$Type == "distal-duplication-by-mobile-element"),"Type"] <- "distal-duplication"
ll_type[[i]]<- table(ll_sv[[i]]$Type)/sum(table(ll_sv[[i]]$Type))
ll_type_m[[i]]<- table(ll_sv[[i]]$Type)/length(unique(as.character(ll_sv[[i]]$TARGET.USI)))
}
dev.new()
#barplot(datatab,col=svTypeCols,las =1)
par(mfrow=c(2,1),mar=c(4,4,0,1))
datatab <- do.call(cbind,ll_type_m)
barplot(datatab,col=svTypeCols,las =1,beside = T,cex.axis=1.3,names=c("","","","",""))
legend("topleft",names(svTypeCols),fill=svTypeCols,bty='n',cex=1.3)
datatab <- do.call(cbind,ll_type)
barplot(datatab,col=svTypeCols,las =1,cex.axis=1.3,cex.names=1.3)
# PLOT SV summaries Figure 2
sv_df <- results_NBL$sv_df
sv_df[,"TARGET.USI"] <- substr(sv_df$TARGET.USI ,11,16)
sv_df[which(sv_df$Type == "probable-inversion"),"Type"] <- "inversion"
sv_df[which(sv_df$Type == "distal-duplication-by-mobile-element"),"Type"] <- "distal-duplication"
ll_stype <- list(
MNA = table(sv_df$Type[which(sv_df$TARGET.USI %in% HR_MNA)])/ length(which(sv_df$TARGET.USI %in% HR_MNA)),
HR_NA = table(sv_df$Type[which(sv_df$TARGET.USI %in% HR_NA)])/length(which(sv_df$TARGET.USI %in% HR_NA)) ,
LINT = table(sv_df$Type[which(sv_df$TARGET.USI %in% c(LOW,INT))])/length(which(sv_df$TARGET.USI %in% c(LOW,INT)))
)
ll_stype_m <- list(
MNA = table(sv_df$Type[which(sv_df$TARGET.USI %in% HR_MNA)])/length(HR_MNA),
HR_NA = table(sv_df$Type[which(sv_df$TARGET.USI %in% HR_NA)])/length(HR_NA) ,
LINT = table(sv_df$Type[which(sv_df$TARGET.USI %in% c(LOW,INT))])/length(c(LOW,INT))
)
par(mfrow=c(2,1),mar=c(4,4,0.5,1))
datatab <- do.call(cbind,ll_stype_m)
barplot(datatab,col=svTypeCols,las =1,beside = T,cex.axis=1.3,names=c("","",""))
legend("topright",names(svTypeCols),fill=svTypeCols,bty='n')
datatab <- do.call(cbind,ll_stype)
barplot(datatab,col=svTypeCols,las =1,cex.axis=1.3,cex.names=1.3)
## join exonic and CNn into coding and intronic and proximal into noncoding
sv_exonic <- lapply(results_NBL$disruptExonSamples,function(x) substr(x,11,16))
sv_intronic <- lapply(results_NBL$disruptIntronSamples,function(x) substr(x,11,16))
sv_proximal <- lapply(results_NBL$bothProximalSamples,function(x) substr(x,11,16))
sv_copynum<- lapply(results_NBL$copynumSamples,function(x) substr(x,11,16))
sv_coding <- merge2lists(sv_exonic,sv_copynum)
sv_noncod <- merge2lists(sv_proximal,sv_intronic)
sv_summary <- merge2lists(sv_coding,sv_noncod)
j_exonic <- results_NBL$disruptExonJunctions
j_intronic <- results_NBL$disruptIntronJunctions
j_proximal <- results_NBL$bothProximalJunctions
j_copynum<- results_NBL$copynumJunctions
j_coding <- merge2lists(j_exonic,j_copynum)
j_noncod <- merge2lists(j_proximal,j_intronic)
j_summary <- merge2lists(j_coding,j_noncod)
## plot hitogram sizes per type (Figure S2)
sv_df_5t <- rbind(results_ALL$sv_df,results_AML$sv_df,results_NBL$sv_df,results_OS$sv_df,results_WT$sv_df)
sameChr<- which(sv_df_5t$Type %in% c("deletion","inversion","tandem-duplication","probable-inversion"))
#sameChr<- which(unlist(lapply(apply(sv_df[,c("LeftChr","RightChr")],1,unique),length)) == 1)
sv_df_same_chr <- sv_df_5t[sameChr,]
sizes <- sv_df_same_chr$RightPosition[]-sv_df_same_chr$LeftPosition
par(mfrow=c(1,3))
h2 <- hist(log10(sizes[which(sv_df_same_chr$Type =="deletion")]+1),
col=rgb(0,0,1,0.5),breaks=40,border=F,xlim=c(0,8),main="Deletion",las=1)
h3 <- hist(log10(sizes[which(sv_df_same_chr$Type == "tandem-duplication")]+1),
col=rgb(0.62,0.12,0.94,0.5),breaks=50,border=F,xlim=c(0,8),main="Tandem-duplication",las=1)
h4 <- hist(log10(sizes[which(sv_df_same_chr$Type %in% c("inversion","probable-inversion"))]+1),
col=rgb(1,0.84,0,0.5),breaks=50,border=F,xlim=c(0,8),main="Inversion",las=1)
totalnum <- table(sv_df$Type)
totalnum <- sort(totalnum)
totalnumv<-as.vector(totalnum)
names(totalnumv)<- names(totalnum)
par(mar=c(3,12,2,2))
barplot(totalnumv,horiz=TRUE,las=1,col=svTypeCols[names(totalnumv)])
# plot density of DiscordantMatePairAlignments in lieu of VAF as requested by reviewer 1
dev.new()
plot(density(log2(ll_sv$AML$DiscordantMatePairAlignments)),col="white",las=1,xlim=c(0,15),main="",xaxt='n',xlab="",ylab=)
lines(density(log2(ll_sv$ALL$DiscordantMatePairAlignments)),col="salmon",lty=3,lwd=2)
lines(density(log2(ll_sv$AML$DiscordantMatePairAlignments)),col="pink",lty=3,lwd=2)
lines(density(log2(ll_sv$OS$DiscordantMatePairAlignments)),col="brown",lty=3,lwd=2)
lines(density(log2(ll_sv$WT$DiscordantMatePairAlignments)),col="green",lty=3,lwd=2)
lines(density(log2(ll_sv$NBL$DiscordantMatePairAlignments)),col="blue",lty=1,lwd=2)
legend("topright",c("ALL","AML","OS","WT","NBL"),lty=c(3,3,3,3,1),lwd=2,col=c("pink","salmon","brown","green","blue"),bty='n')
axis(1,at=seq(0,16,2),labels=2^seq(0,16,2),las=2)
## Figure 2A stack barplot ##
sample_order <- rep(0,length(unique(as.character(sv_df$TARGET.USI))))
names(sample_order) <- unique(as.character(sv_df$TARGET.USI))
types <- unique(sv_df$Type)
byType <- sapply(names(sample_order),function(i) table(sv_df[which(sv_df$TARGET.USI == i),"Type"])  )
#names(byType) <- substr(names(byType) ,11,16)
byType<-list()
for(i in cgi_samples){
byType[[i]] <- rep(0,length(types))
names(byType[[i]]) <- types
dat <- table(sv_df[which(sv_df$TARGET.USI == i),"Type"])
byType[[i]][intersect(names(dat),types)] <- dat[intersect(names(dat),types)]
}
totSV <- unlist(lapply(byType,sum))
sample_order[names(totSV)] <- totSV
sample_order <- c(sort(sample_order[HR_MNA]),sort(sample_order[HR_NA]),sort(sample_order[INT]),sort(sample_order[LOW]))
svTypeCols <- c("lightgrey","blue","purple","green","yellow","red")
names(svTypeCols)<- c("complex","deletion","distal-duplication","interchromosomal","inversion","tandem-duplication")
svBarPlorData <- matrix(ncol=length(sample_order),nrow=length(types))
colnames(svBarPlorData) <- names(sample_order)
rownames(svBarPlorData) <- types
svBarPlorData[]<-0
for(i in colnames(svBarPlorData)) svBarPlorData[names(byType[[i]]),i] <- byType[[i]]
colnames(svBarPlorData) <- substr(names(sample_order),11,16)
svBarPlorData<-svBarPlorData[intersect(names(svTypeCols),rownames(svBarPlorData)),]
par(family = "Arial",lwd = 0.3)
barplot(svBarPlorData,las=2,cex.names=0.7,col=svTypeCols[rownames(svBarPlorData)],lwd=1,cex.axis=1.3)
par(family = "Arial",lwd = 1)
abline(h=seq(0,3500,50),lty=3,lwd=0.7,col="grey")
legend("topright",rev(rownames(svBarPlorData)),fill=rev(svTypeCols[rownames(svBarPlorData)]),bty="n",cex=1.3,ncol=2)
# # # # # # # # # # # # # # # # # # # # # # # # # #
## stack bar plot by chromosome by tyype
sv_noa <- sv_df[which(sv_df$TARGET.USI %in% HR_NA),]
sv_amp <- sv_df[which(sv_df$TARGET.USI %in% HR_MNA),]
sv_noa_types <- sv_amp_types <- list()
types_temp <- rep(0,length(types))
names(types_temp)<- types
for(chr in paste("chr",c(1:22,"X"),sep="")){
sv_noa_types[[chr]] <- sv_amp_types[[chr]] <-types_temp
noachr <- intersect(which(sv_noa$LeftChr == chr),which(sv_noa$RightChr == chr))
ampchr <- intersect(which(sv_amp$LeftChr == chr),which(sv_amp$RightChr == chr))
noatypescol <- sv_noa$Type[noachr]
noatypescol[which(noatypescol == "probable-inversion")] <- "inversion"
sv_noa_types[[chr]][names(table(noatypescol))] <-   table(noatypescol)
amptypescol <- sv_noa$Type[ampchr]
amptypescol[which(amptypescol == "probable-inversion")] <- "inversion"
sv_amp_types[[chr]][names(table(amptypescol))] <-   table(amptypescol)
}
tempsampl <- rep(0,length(cgi_samples))
names(tempsampl) <-cgi_samples
llsv <- list()
for(chr in paste("chr",c(1:22,"X"),sep="")) llsv[["all"]][[paste(chr,"S4na")]] <- tempsampl[HR_NA]
for(chr in paste("chr",c(1:22,"X"),sep="")) llsv[["all"]][[paste(chr,"MNa")]] <- tempsampl[HR_MNA]
par(mfrow=c(1,6),mar=c(5,1,3,1))
types <- c("complex","deletion","distal-duplication","inversion","interchromosomal","tandem-duplication")
results <- list()
for(type in types){
tempsampl <- rep(0,length(cgi_samples))
names(tempsampl) <-cgi_samples
typelist<-c()
llsv[[type]]<-list()
for(chr in paste("chr",c(1:22,"X"),sep="")){
if(type == "inversion"){ typelist <-c("inversion","probable-inversion")
}else{typelist = type}
sv_ids <- c(setdiff(intersect(which(sv_df$RightChr == chr),which(sv_df$Type %in% typelist)),intersect(which(sv_df$LeftChr == chr),which(sv_df$Type %in% typelist)) ),
intersect(which(sv_df$LeftChr == chr),which(sv_df$Type %in% typelist)))
chrdat <- na.omit(table(as.character(sv_df$TARGET.USI[sv_ids])))
tempsampl[]<-0
tempsampl[names(chrdat)] <- chrdat
wt <- wilcox.test(tempsampl[HR_NA],tempsampl[HR_MNA])
site <- sign(mean(rank(tempsampl)[HR_NA])-mean(rank(tempsampl)[HR_MNA]))
results[[type]][[chr]] <- site*(-log10(wt$p.value))
llsv[[type]][[paste(chr,"S4na")]]<-tempsampl[HR_NA]
llsv[[type]][[paste(chr,"MNa")]]<-tempsampl[HR_MNA]
llsv[["all"]][[paste(chr,"S4na")]] <- llsv[["all"]][[paste(chr,"S4na")]]+tempsampl[HR_NA]
llsv[["all"]][[paste(chr,"MNa")]] <- llsv[["all"]][[paste(chr,"MNa")]]+tempsampl[HR_MNA]
}
results[[type]] <-rev(results[[type]])
data <- unlist(results[[type]])
color <- data
color[] <- "white"
color[which(data < 0)] <- "red"
color[which(data > 0)] <- "orange"
xmin<-min(results[[type]])
if(min(results[[type]]) > -5) xmin <- -5
xmax<-max(results[[type]])
if(max(results[[type]]) < 5) xmax <- 5
barplot(unlist(results[[type]]),las=1,names="",col=color,main=type,horiz=T,xlim=c(xmin,xmax))
abline(v=c(-1.3,0,1.3),lty=c(3,1,3))
}
write.table(do.call(cbind,results),sep="\t",file=)
a<-b<-c<-d<-e<-f<-g<-h<-i<-j<-k<-l<-wtab<-wtcd<-wtef<-wtgh<-wtij<-wtkl<-list()
for(chr in paste("chr",c(1:22,"X"),sep="")){
a[[chr]] <- mean(sort(llsv[["interchromosomal"]][[paste(chr,"MNa")]])[3:27])
b[[chr]] <- mean(sort(llsv[["interchromosomal"]][[paste(chr,"S4na")]])[7:70])
wtab[[chr]] <- wilcox.test(sort(llsv[["interchromosomal"]][[paste(chr,"MNa")]])[3:27],sort(llsv[["interchromosomal"]][[paste(chr,"S4na")]])[7:70])$p.value
c[[chr]] <- mean(sort(llsv[["tandem-duplication"]][[paste(chr,"MNa")]])[3:27])
d[[chr]] <- mean(sort(llsv[["tandem-duplication"]][[paste(chr,"S4na")]])[7:70])
wtcd[[chr]] <- wilcox.test(sort(llsv[["tandem-duplication"]][[paste(chr,"MNa")]])[3:27],sort(llsv[["tandem-duplication"]][[paste(chr,"S4na")]])[7:70])$p.value
e[[chr]] <- mean(sort(llsv[["deletion"]][[paste(chr,"MNa")]])[3:27])
f[[chr]] <- mean(sort(llsv[["deletion"]][[paste(chr,"S4na")]])[7:70])
wtef[[chr]]<- wilcox.test(sort(llsv[["deletion"]][[paste(chr,"MNa")]])[3:27],sort(llsv[["deletion"]][[paste(chr,"S4na")]])[7:70])$p.value
g[[chr]] <- mean(sort(llsv[["inversion"]][[paste(chr,"MNa")]])[3:27])
h[[chr]] <- mean(sort(llsv[["inversion"]][[paste(chr,"S4na")]])[7:70])
wtgh[[chr]]<- wilcox.test(sort(llsv[["inversion"]][[paste(chr,"MNa")]])[3:27],sort(llsv[["inversion"]][[paste(chr,"S4na")]])[7:70])$p.value
i[[chr]] <- mean(sort(llsv[["complex"]][[paste(chr,"MNa")]])[3:27])
j[[chr]] <- mean(sort(llsv[["complex"]][[paste(chr,"S4na")]])[7:70])
wtij[[chr]]<- wilcox.test(sort(llsv[["complex"]][[paste(chr,"MNa")]])[3:27],sort(llsv[["complex"]][[paste(chr,"S4na")]])[7:70])$p.value
k[[chr]] <- mean(sort(llsv[["all"]][[paste(chr,"MNa")]])[3:27])
l[[chr]] <- mean(sort(llsv[["all"]][[paste(chr,"S4na")]])[7:70])
wtkl[[chr]]<- wilcox.test(sort(llsv[["all"]][[paste(chr,"MNa")]])[3:27],sort(llsv[["all"]][[paste(chr,"S4na")]])[7:70])$p.value
}
par(mfrow=c(4,2))
barplot(rbind(unlist(a),unlist(b)),beside=T,las=2,col=c("red","orange"),ylim=c(0,1.5))
barplot(rbind(unlist(c),unlist(d)),beside=T,las=2,col=c("red","orange"),ylim=c(0,8),yaxt='n')
axis(2,at=seq(0,8,0.5))
barplot(rbind(unlist(e),unlist(f)),beside=T,las=2,col=c("red","orange"),ylim=c(0,8),yaxt='n')
axis(2,at=seq(0,8,0.5))
barplot(rbind(unlist(g),unlist(h)),beside=T,las=2,col=c("red","orange"),ylim=c(0,11))
axis(2,at=seq(0,11,0.5))
barplot(rbind(unlist(i),unlist(j)),beside=T,las=2,col=c("red","orange"),ylim=c(0,43),yaxt='n')
axis(2,at=seq(0,43,1))
barplot(rbind(unlist(k),unlist(l)),beside=T,las=2,col=c("red","orange"),ylim=c(0,78),yaxt='n')
axis(2,at=seq(0,78,1),las=1)
a <- sv_df$LeftChr[intersect(which(sv_df$Type == "complex"),which(sv_df$TARGET.USI %in% HR_MNA))]
b <- sv_df$RightChr[intersect(which(sv_df$Type == "complex"),which(sv_df$TARGET.USI %in% HR_MNA))]
length(intersect(which(a != "chr2"),which(b != "chr2")))/length(HR_MNA)
a <- sv_df$LeftChr[intersect(which(sv_df$Type == "complex"),which(sv_df$TARGET.USI %in% HR_NA))]
b <- sv_df$RightChr[intersect(which(sv_df$Type == "complex"),which(sv_df$TARGET.USI %in% HR_NA))]
length(intersect(which(a != "chr2"),which(b != "chr2")))/length(HR_NA)
sv_df_complex <- sv_df[which(sv_df$Type == "complex"),]
a <- sv_df_complex[intersect(which(sv_df_complex$LeftChr != "chr2"),which(sv_df_complex$RightChr != "chr2")),"TARGET.USI"]
#a <- sv_df_complex[,"TARGET.USI"]
hr_na_complex <- table(a)[HR_NA]
hr_mna_complex <- table(a)[HR_MNA]
hr_na_complex[which(is.na(hr_na_complex))]<-0
hr_mna_complex[which(is.na(hr_mna_complex))]<-0
names(hr_na_complex)<-HR_NA
names(hr_mna_complex)<-HR_MNA
ll<-list(HRNA=as.numeric(hr_na_complex),HRMNA=as.numeric(hr_mna_complex))
boxplot(ll)
beeswearm(ll)
wilcox.test(ll$HRNA,ll$HRMNA)
sv_df_complex_mna <- sv_df[intersect(which(sv_df$Type == "complex"),which(sv_df$TARGET.USI %in% HR_MNA)),]
sort(table(sv_df_complex_mna$RightChr))
sort(table(sv_df_complex_mna$LeftChr))
a <- sv_df[unique(c(which(sv_df$LeftChr == "chrM"),which(sv_df$RightChr == "chrM"))),"TARGET.USI"]
a_na <- table(a)[HR_NA]
a_mna <- table(a)[HR_MNA]
a_na[which(is.na(a_na))]<-0
a_mna[which(is.na(a_mna))]<-0
names(a_na)<-HR_NA
names(a_mna)<-HR_MNA
ll<-list(HRNA=as.numeric(a_na),HRMNA=as.numeric(a_mna))
boxplot(ll)
wilcox.test(ll$HRNA,ll$HRMNA)
chrm_sv <- sv_df[unique(c(which(sv_df$LeftChr == "chrM"),which(sv_df$RightChr == "chrM"))),]
breaks <- results_BP$breaks
#breaks <- results_BP_snp$breaks
mnabps <- rep(0,length(HR_MNA));names(mnabps) <- HR_MNA; mnabps[names(table(breaks$sample)[HR_MNA])] <- table(breaks$sample)[HR_MNA]
nabps <- rep(0,length(HR_NA));names(nabps) <- HR_NA; nabps[names(table(breaks$sample)[HR_NA])] <- table(breaks$sample)[HR_NA]
intbps <- rep(0,length(INT));names(intbps) <- INT; intbps[names(table(breaks$sample)[INT])] <- table(breaks$sample)[INT]
lowbps <- rep(0,length(LOW));names(lowbps) <- LOW; lowbps[names(table(breaks$sample)[LOW])] <- table(breaks$sample)[LOW]
bpfreq<-c(sort(mnabps),sort(nabps),sort(intbps),sort(lowbps))
barplot(bpfreq,col=c(rep("red",length(HR_MNA)),rep("orange",length(HR_NA)),rep("darkgreen",length(INT)),rep("green",length(LOW)) ),las=1,border=NA)
breaks <- results_BP_snp$breaks
mnabps <- rep(0,length(HR_MNA_snp));names(mnabps) <- HR_MNA_snp; mnabps[names(table(breaks$sample)[HR_MNA_snp])] <- table(breaks$sample)[HR_MNA_snp]
nabps <- rep(0,length(HR_NA_snp));names(nabps) <- HR_NA_snp; nabps[names(table(breaks$sample)[HR_NA_snp])] <- table(breaks$sample)[HR_NA_snp]
intbps <- rep(0,length(INT_snp));names(intbps) <- INT_snp; intbps[names(table(breaks$sample)[INT_snp])] <- table(breaks$sample)[INT_snp]
lowbps <- rep(0,length(LOW_snp));names(lowbps) <- LOW_snp; lowbps[names(table(breaks$sample)[LOW_snp])] <- table(breaks$sample)[LOW_snp]
bpfreq<-c(sort(mnabps),sort(nabps),sort(intbps),sort(lowbps))
barplot(bpfreq,col=c(rep("red",length(HR_MNA_snp)),rep("orange",length(HR_NA_snp)),rep("darkgreen",length(INT_snp)),rep("green",length(LOW_snp)) ),las=1,border=NA)
a <- b <- wtab <- list()
tempamp <- rep(0,length(HR_MNA))
names(tempamp) <-HR_MNA
tempnoa <- rep(0,length(HR_NA))
names(tempnoa) <- HR_NA
for(chr in paste("chr",c(1:22,"X"),sep="")){
a[[chr]] <- tempamp
b[[chr]] <- tempnoa
resa <- table(results_BP$breaks$sample[intersect(which(results_BP$breaks$sample %in% HR_MNA),which(results_BP$breaks$chr == chr))])
resb <- table(results_BP$breaks$sample[intersect(which(results_BP$breaks$sample %in% HR_NA),which(results_BP$breaks$chr == chr))])
a[[chr]][names(resa)] <- resa
b[[chr]][names(resb)] <- resb
wtab[[chr]]<-wilcox.test(a[[chr]],b[[chr]])$p.value
a[[chr]] <- mean(sort(a[[chr]])[3:27])
b[[chr]] <- mean(sort(b[[chr]])[7:70])
}
par(mfrow=c(1,1),family = "Arial")
barplot(rbind(unlist(a),unlist(b)),beside=T,las=2,col=c("red","orange"),ylim=c(0,8),yaxt='n')
axis(2,at=seq(0,8,0.5))
a <- b <- wtab <- list()
tempamp <- rep(0,length(HR_MNA_snp))
names(tempamp) <-HR_MNA_snp
tempnoa <- rep(0,length(HR_NA_snp))
names(tempnoa) <- HR_NA_snp
for(chr in paste("chr",c(1:22,"X"),sep="")){
a[[chr]] <- tempamp
b[[chr]] <- tempnoa
resa <- table(results_BP_snp$breaks$sample[intersect(which(results_BP_snp$breaks$sample %in% HR_MNA_snp),which(results_BP_snp$breaks$chr == chr))])
resb <- table(results_BP_snp$breaks$sample[intersect(which(results_BP_snp$breaks$sample %in% HR_NA_snp),which(results_BP_snp$breaks$chr == chr))])
a[[chr]][names(resa)] <- resa
b[[chr]][names(resb)] <- resb
wtab[[chr]]<-wilcox.test(a[[chr]],b[[chr]])$p.value
a[[chr]] <- mean(sort(a[[chr]])[23:215])
b[[chr]] <- mean(sort(b[[chr]])[42:380])
}
barplot(rbind(unlist(a),unlist(b)),beside=T,las=2,col=c("red","orange"))
axis(2,at=seq(0,8,0.5))
ampchr2 <- intersect(which(sv_df$TARGET.USI %in% HR_MNA),which(sv_df$LeftChr == "chr2"))
hist(as.numeric(sv_df$LeftPosition[ampchr2]),breaks=100,col=rgb(1,0,0,0.5),border=rgb(1,0,0),las=1)
noachr2 <- intersect(which(sv_df$TARGET.USI %in% HR_NA),which(sv_df$LeftChr == "chr2"))
hist(as.numeric(sv_df$LeftPosition[noachr2]),breaks=100,col=rgb(1,0.65,0,0.5),border=rgb(1,0.65,0),add=T,las=1)
chr2.24_genes <- c("RAD51AP2","NT5C1B-RDH14","LINC01804","NBAS","MYCN","FAM84A","DDX1","MYCNUT","MYCNOS","GACAT3","FAM49A","VSNL1","RDH14","NT5C1B","LINC00276")
chr5.p15 <- c("TERT","SLC12A7","LINC01804","NBAS","MYCN","FAM84A","DDX1","MYCNUT","MYCNOS","GACAT3","FAM49A","VSNL1","RDH14","NT5C1B","LINC00276")
mycn_sv_ids <- unique(unlist(j_summary[chr2.24_genes]))
mycn_sv_samples <- unique(unlist(sv_summary[chr2.24_genes]))
nonmycn_genes <- setdiff(names(j_summary),chr2.24_genes)
res<-list()
for(i in 1:length(chr2.24_genes)){
gene1<-chr2.24_genes[i]
message(gene1)
for(j in i:length(nonmycn_genes)){
gene2 <- nonmycn_genes[j]
if(genes_tab[gene1,"seqnames"] != genes_tab[gene1,"seqnames"]){
res[[paste(gene1,gene2,sep="_")]] <- intersect(j_summary[[gene1]],j_summary[[gene2]])
}else if(abs(genes_tab[gene1,"start"]- genes_tab[gene2,"start"]) > 2000000){
res[[paste(gene1,gene2,sep="_")]] <- intersect(j_summary[[gene1]],j_summary[[gene2]])
}
}
}
res<-res[which(unlist(lapply(res,length))>0)]
res_6let <- lapply(res,function(x) unique(substr(x,11,16)))
barplot(sort(unlist(lapply(res,length))),horiz=T,las=1)
gene_pair<-do.call(rbind,strsplit(names(res),"_"))
amplicon_translocations <- cbind(gene_pair,unlist(lapply(res_6let,paste,collapse=" ")), genes_tab[gene_pair[,2],])
res2<-list()
for(i in setdiff(names(j_summary),chr2.24_genes)){
res2[[i]] <- intersect(mycn_sv_ids,j_summary[[i]])
}
res3 <- lapply(res2,function(x) unique(substr(x,11,16)))
sort(unlist(lapply(res3,length)))
a<-sort(unlist(lapply(res3,length)))
barplot(sort(a[which(a > 0)],decreasing=T),horiz=T,las=1)
ressamps <- lapply(res,function(x) unique(substr(x,0,6)))
mycn_sv <- sv_df[mycn_sv_ids,]
which(mycn_sv$LeftChr != "chr2")
chrsaffected <- names(sort(table(mycn_sv[which(mycn_sv$RightChr != "chr2"),"RightChr"])))
res<-list()
for(i in chrsaffected){
res[[i]] <- unique(mycn_sv[which(mycn_sv$RightChr == i),"TARGET.USI"])
}
r_expmat["TERT",intersect(setdiff(res$chr5,sv_summary$TERT),colnames(r_expmat))]
l_expmat["TERT",intersect(setdiff(res$chr5,sv_summary$TERT),colnames(l_expmat))]
r_expmat["TERT",intersect(intersect(res$chr5,sv_summary$TERT),colnames(r_expmat))]
l_expmat["TERT",intersect(intersect(res$chr5,sv_summary$TERT),colnames(l_expmat))]
refseq <- read.delim("~/Box Sync/My_CHOP/reference_files/ucsc_refseq_0ct31_2018.txt",as.is=T)
head(refseq)
chromosomes <- paste("chr",c(1:22,"X"),sep="")
refseq<-refseq[which(refseq$chrom %in% chromosomes),]
refseq<-refseq[which(!duplicated(refseq$name)),]
#outpath <- "~/Box Sync/My_CHOP/GWAS/somatic/SV/"
results <- results_NBL
#sv_df<-results_NBL$sv_df
upstr <- 100000
dnstr <- 25000
